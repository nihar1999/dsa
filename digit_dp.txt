#include<bits/stdc++.h>
#define ll long long int
#define mod 1000000007
#define pb push_back
#define mp make_pair
using namespace std;
int x,y,l;
vector<int>a;
ll dp[20][2][200];
void init()
{
    for(int i=0;i<20;i++)
    {
        for(int j=0;j<2;j++)
        {
            for(int k=0;k<200;k++)
                dp[i][j][k]=-1;
        }
    }
}
ll ans (int index,int tight,ll sum)
{
    if(index>=l)
        return sum;
    if(dp[index][tight][sum]!=-1)
        return dp[index][tight][sum];
    ll res=0;
    int k = (tight) ? a[index] : 9;

    for(int i=0;i<=k;i++)
    {
        int new_tight = 0;
        if(a[index]==i) new_tight=tight;
        //first i put new_tight=tight,but it was wrong.
        //eg. 4287,suppose till now number is 11**,and at i=8,number will become 118* as a[index]==i , but this is not actually
        //a problem for us as 118* us already smaller than real number.therefore  if a[index]==i condition holds ,then we assign
        //new_tight = tight..
        res+=ans(index+1,new_tight,sum+i);
        //cout<<"ans("<<index+1<<","<<new_tight<<","<<sum+i<<")"<<endl;
    }
    return dp[index][tight][sum] = res;

}
void num (int n)
{
    while(n){
    a.push_back(n%10);
    n/=10;
    }
    reverse(a.begin(),a.end());
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    int t=1;
    //cin>>t;
    while(t){
    cin>>x>>y;
    if(x==-1 && y==-1)
        break;

    init();
    num(y);
    l = a.size();
    ll res1 = ans(0,1,0);
    a.clear();
    init();
    num(x-1);
    l=a.size();
    ll res2 = ans(0,1,0);
    cout<<res1-res2<<endl;
    a.clear();
    }
}
