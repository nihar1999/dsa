#include<bits/stdc++.h>
#define ll long long int
#define mod 1000000007
#define pb push_back
#define mp make_pair
#define N 200005
using namespace std;
vector<int>adj[N];
int dp[N][25],n,vis[N],d[N];
void blift (int s,int par)
{
	for(int j=1;j<20;j++)
	{
		for(int i=1;i<=n;i++)
		{
			if(dp[i][j-1]!=-1)
			dp[i][j] = dp[dp[i][j-1]][j-1];
			else 
			dp[i][j] = -1;
		}
	}
}
void dfs (int s,int par,int level)
{
	vis[s] = 1;
	dp[s][0] = par;
	d[s] = level;
	for(int i=0;i<adj[s].size();i++)
	{
		if(vis[adj[s][i]]==0){
		dfs(adj[s][i],s,level+1);
		}
	}
}
int uplift (int node,int diff)
{
	for(int i=0;i<20;i++)
	{
		if(diff & (1<<i))
			node = dp[node][i];
	}
	return node;
}
int lca (int u,int v)
{
	if(d[u] < d[v]) 
	swap(u,v);
	
	u = uplift(u,d[u] - d[v]);
	if(v==u) return v;
	
	for(int i=19;i>=0;i--)
	{
		if(dp[u][i]!=dp[v][i])
		{
			u = dp[u][i];
			v = dp[v][i];
		}
	}
	return 	dp[u][0];
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    int q;
    cin>>n>>q;
    for(int i=2,x,y;i<=n;i++){
    	cin>>x;
    	adj[x].pb(i);
    	adj[i].pb(x);
    }
    for(int i=1;i<=n;i++)
	for(int j=0;j<20;j++)
	dp[i][j] = -1;
    dfs(1,-1,0);
    blift(1,0);
    
    while(q--)
    {
    	int a,b;
    	cin>>a>>b;
    	cout<<lca(a,b)<<endl;
    }
}
